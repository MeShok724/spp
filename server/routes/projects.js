import express from 'express';
import { Project } from '../models/Project.js';
import { Task } from '../models/Task.js';

const router = express.Router();

// GET /api/projects - –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞—á
router.get('/', async (req, res) => {
  try {
    console.log('üîç GET /api/projects - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
    const projects = await Project.find()
      .populate('participants', 'login role')
      .populate('taskCount');

    // console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:', projects.length);
    // console.log('üìä –ü—Ä–æ–µ–∫—Ç—ã:', JSON.stringify(projects, null, 2));
    
    res.json(projects);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ GET /api/projects:', error);
    res.status(500).json({ error: error.message });
  }
});

// GET /api/projects/:id - –ø—Ä–æ–µ–∫—Ç –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const project = await Project.findById(req.params.id)
      .populate('participants', 'login role')
      .populate('taskCount');
    
    if (!project) {
      return res.status(404).json({ error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json(project);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// POST /api/projects - —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
router.post('/', async (req, res) => {
  try {
    const { title, description, participants } = req.body;
    
    const project = new Project({
      title,
      description,
      participants: participants || []
    });
    
    await project.save();
    await project.populate('participants', 'login role');
    
    res.status(201).json(project);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// PUT /api/projects/:id - –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
router.put('/:id', async (req, res) => {
  try {
    const project = await Project.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    ).populate('participants', 'login role');
    
    if (!project) {
      return res.status(404).json({ error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json(project);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// DELETE /api/projects/:id - —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
router.delete('/:id', async (req, res) => {
  try {
    const project = await Project.findByIdAndDelete(req.params.id);
    
    if (!project) {
      return res.status(404).json({ error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
    await Task.deleteMany({ project: req.params.id });
    
    res.json({ message: '–ü—Ä–æ–µ–∫—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã', project });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

export default router;