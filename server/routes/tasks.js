import express from 'express';
import { Task } from '../models/Task.js';
import { Project } from '../models/Project.js';
import { User } from '../models/User.js'
import {auth, adminOrMember, isAdmin, adminOrMemberTask} from '../middleware/auth.js'

const router = express.Router();

// GET /api/tasks - –≤—Å–µ –∑–∞–¥–∞—á–∏
router.get('/', auth, async (req, res) => {
  try {
    console.log('üîç GET /api/tasks - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
    const tasks = await Task.find()
      .populate('assignee', 'login role')
      .populate('project', 'title');
    
    // console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á:', tasks.length);
    // console.log('üìä –ó–∞–¥–∞—á–∏:', JSON.stringify(tasks, null, 2));
    res.json(tasks);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ GET /api/tasks:', error);
    res.status(500).json({ error: error.message });
  }
});

// GET /api/tasks/project/:projectId - –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
router.get('/project/:projectId', auth, adminOrMember, async (req, res) => {
  try {
    const tasks = await Task.find({ project: req.params.projectId })
      .populate('assignee', 'login role')
      .populate('project', 'title');
    
    res.json(tasks);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// GET /api/tasks/:id - –∑–∞–¥–∞—á–∞ –ø–æ ID
router.get('/:id', auth, adminOrMemberTask, async (req, res) => {
  try {
    const task = await Task.findById(req.params.id)
      .populate('assignee', 'login role')
      .populate('project', 'title');
    
    if (!task) {
      return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    res.json(task);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// POST /api/tasks - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
router.post('/', auth, adminOrMember, async (req, res) => {
  try {
    const { title, description, status, assignee, project } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    const projectExists = await Project.findById(project);
    if (!projectExists) {
      return res.status(404).json({ error: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const task = new Task({
      title,
      description,
      status: status || 'todo',
      assignee,
      project
    });
    
    await task.save();
    await task.populate('assignee', 'login role');
    await task.populate('project', 'title');
    
    res.status(201).json(task);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// PUT /api/tasks/:id - –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
router.put('/:id', auth, adminOrMemberTask, async (req, res) => {
  try {
    const task = await Task.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    )
    .populate('assignee', 'login role')
    .populate('project', 'title');
    
    if (!task) {
      return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    res.json(task);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// DELETE /api/tasks/:id - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
router.delete('/:id', auth, adminOrMemberTask, async (req, res) => {
  try {
    const task = await Task.findByIdAndDelete(req.params.id);
    
    if (!task) {
      return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    res.json({ message: '–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞', task });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

export default router;